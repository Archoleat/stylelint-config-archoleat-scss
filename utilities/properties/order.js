import deprecated from './deprecated.js';
import experimental from './experimental.js';
import nonStandard from './non-standard.js';

const propertiesOrder = {
  'order/order': [
    'custom-properties',
    'dollar-variables',
    {
      type: 'at-rule',
      name: 'include',
      hasBlock: false,
    },
    'declarations',
    {
      type: 'rule',
      selector: '&::selection',
    },
    {
      type: 'rule',
      selector: '&::backdrop',
    },
    {
      type: 'rule',
      selector: '&::before',
    },
    {
      type: 'rule',
      selector: '&::after',
    },
    {
      type: 'rule',
      selector: '&::marker',
    },
    {
      type: 'rule',
      selector: '&::first-line',
    },
    {
      type: 'rule',
      selector: '&::first-letter',
    },
    {
      type: 'rule',
      selector: '&::cue',
    },
    {
      type: 'rule',
      selector: '&::cue-region',
    },
    {
      type: 'rule',
      selector: '&::placeholder',
    },
    {
      type: 'rule',
      selector: '&::file-selector-button',
    },
    {
      type: 'rule',
      selector: '&::highlight',
    },
    {
      type: 'rule',
      selector: '&::part',
    },
    {
      type: 'rule',
      selector: '&::slotted',
    },
    {
      type: 'rule',
      selector: experimental.pseudoElement.targetText,
    },
    {
      type: 'rule',
      selector: experimental.pseudoElement.spellingError,
    },
    {
      type: 'rule',
      selector: experimental.pseudoElement.grammarError,
    },
    {
      type: 'rule',
      selector: experimental.pseudoElement.viewTransition,
    },
    {
      type: 'rule',
      selector: experimental.pseudoElement.viewTransitionGroup,
    },
    {
      type: 'rule',
      selector: experimental.pseudoElement.viewTransitionImagePair,
    },
    {
      type: 'rule',
      selector: experimental.pseudoElement.viewTransitionNew,
    },
    {
      type: 'rule',
      selector: experimental.pseudoElement.viewTransitionOld,
    },
    {
      type: 'rule',
      selector: experimental.pseudoElement.webkit.sliderRunnableTrack,
    },
    {
      type: 'rule',
      selector: experimental.pseudoElement.webkit.sliderThumb,
    },
    {
      type: 'rule',
      selector: experimental.pseudoElement.moz.focusInner,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.webkit.innerSpinButton,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.webkit.meterBar,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.webkit.meterEvenLessGoodValue,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.webkit.meterInnerElement,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.webkit.meterOptimumValue,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.webkit.meterSubOptimumValue,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.webkit.progressBar,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.webkit.progressInnerElement,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.webkit.progressValue,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.webkit.scrollbar,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.webkit.searchResultsButton,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.webkit.searchCancelButton,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.moz.colorSwatch,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.moz.listBullet,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.moz.listNumber,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.moz.page,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.moz.pageSequence,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.moz.pageSequence,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.moz.progressBar,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.moz.rangeTrack,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.moz.rangeProgress,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.moz.rangeThumb,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.moz.scrolledPageSequence,
    },
    'rules',
    {
      type: 'rule',
      selector: '&:root',
    },
    {
      type: 'rule',
      selector: '&:lang',
    },
    {
      type: 'rule',
      selector: '&:scope',
    },
    {
      type: 'rule',
      selector: '&:modal',
    },
    {
      type: 'rule',
      selector: '&:past',
    },
    {
      type: 'rule',
      selector: '&:current',
    },
    {
      type: 'rule',
      selector: '&:future',
    },
    {
      type: 'rule',
      selector: '&:where',
    },
    {
      type: 'rule',
      selector: '&:is',
    },
    {
      type: 'rule',
      selector: '&:has',
    },
    {
      type: 'rule',
      selector: '&:not',
    },
    {
      type: 'rule',
      selector: '&:empty',
    },
    {
      type: 'rule',
      selector: '&:target',
    },
    {
      type: 'rule',
      selector: '&:link',
    },
    {
      type: 'rule',
      selector: '&:local-link',
    },
    {
      type: 'rule',
      selector: '&:any-link',
    },
    {
      type: 'rule',
      selector: '&:defined',
    },
    {
      type: 'rule',
      selector: '&:buffering',
    },
    {
      type: 'rule',
      selector: '&:placeholder-shown',
    },
    {
      type: 'rule',
      selector: '&:right',
    },
    {
      type: 'rule',
      selector: '&:left',
    },
    {
      type: 'rule',
      selector: '&:host',
    },
    {
      type: 'rule',
      selector: '&:host-content',
    },
    {
      type: 'rule',
      selector: '&:only-of-type',
    },
    {
      type: 'rule',
      selector: '&:first-of-type',
    },
    {
      type: 'rule',
      selector: '&:nth-of-type',
    },
    {
      type: 'rule',
      selector: '&:last-of-type',
    },
    {
      type: 'rule',
      selector: '&:nth-last-of-type',
    },
    {
      type: 'rule',
      selector: '&:only-child',
    },
    {
      type: 'rule',
      selector: '&:first',
    },
    {
      type: 'rule',
      selector: '&:first-child',
    },
    {
      type: 'rule',
      selector: '&:nth-child',
    },
    {
      type: 'rule',
      selector: '&:last-child',
    },
    {
      type: 'rule',
      selector: '&:nth-last-child',
    },
    {
      type: 'rule',
      selector: experimental.pseudoClass.targetWithin,
    },
    {
      type: 'rule',
      selector: experimental.pseudoClass.blank,
    },
    {
      type: 'rule',
      selector: '&:default',
    },
    {
      type: 'rule',
      selector: '&:enabled',
    },
    {
      type: 'rule',
      selector: '&:disabled',
    },
    {
      type: 'rule',
      selector: '&:hover',
    },
    {
      type: 'rule',
      selector: '&:focus',
    },
    {
      type: 'rule',
      selector: '&:focus-within',
    },
    {
      type: 'rule',
      selector: '&:focus-visible',
    },
    {
      type: 'rule',
      selector: '&:active',
    },
    {
      type: 'rule',
      selector: '&:checked',
    },
    {
      type: 'rule',
      selector: '&:visited',
    },
    {
      type: 'rule',
      selector: '&:indeterminate',
    },
    {
      type: 'rule',
      selector: '&:in-range',
    },
    {
      type: 'rule',
      selector: '&:out-of-range',
    },
    {
      type: 'rule',
      selector: '&:valid',
    },
    {
      type: 'rule',
      selector: '&:invalid',
    },
    {
      type: 'rule',
      selector: '&:user-valid',
    },
    {
      type: 'rule',
      selector: '&:user-invalid',
    },
    {
      type: 'rule',
      selector: '&:read-only',
    },
    {
      type: 'rule',
      selector: '&:read-write',
    },
    {
      type: 'rule',
      selector: '&:optional',
    },
    {
      type: 'rule',
      selector: '&:required',
    },
    {
      type: 'rule',
      selector: '&:popover-open',
    },
    {
      type: 'rule',
      selector: '&:fullscreen',
    },
    {
      type: 'rule',
      selector: '&:picture-in-picture',
    },
    {
      type: 'rule',
      selector: '&:autofill',
    },
    {
      type: 'rule',
      selector: '&:playing',
    },
    {
      type: 'rule',
      selector: '&:paused',
    },
    {
      type: 'rule',
      selector: '&:stalled',
    },
    {
      type: 'rule',
      selector: '&:muted',
    },
    {
      type: 'rule',
      selector: '&:volume-locked',
    },
    {
      type: 'rule',
      selector: '&:seeking',
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.broken,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.dragOver,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.firstNode,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.lastNode,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.handlerBlocked,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.handlerCrashed,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.handlerDisabled,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.loading,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.localeDir,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.onlyWhitespace,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.submitInvalid,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.suppressed,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.userDisabled,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.windowInactive,
    },
    {
      type: 'rule',
      selector: '&\\[[^\\[\\]]+\\]',
    },
    {
      type: 'rule',
      selector: '&\\..+',
    },
    {
      type: 'rule',
      selector: '&--.+',
    },
    {
      type: 'rule',
      selector: '.* &',
    },
    {
      type: 'at-rule',
      name: 'include',
      hasBlock: true,
    },
    'at-rules',
  ],
  'order/properties-alphabetical-order': null,
  'order/properties-order': [
    [
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'all',
        order: 'flexible',
        properties: ['all', 'page'],
      },

      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'print',
        order: 'flexible',
        properties: [
          'break-before',
          'break-inside',
          'break-after',
          'orphans',
          'widows',
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'actions',
        order: 'flexible',
        properties: [
          'cursor',
          'pointer-events',
          'touch-action',
          'resize',
          nonStandard.property.zoom,
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'user actions',
        order: 'flexible',
        properties: ['user-select', 'user-zoom'],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'content',
        order: 'flexible',
        properties: ['content', 'quotes'],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'counter',
        order: 'flexible',
        properties: ['counter-increment', 'counter-set', 'counter-reset'],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'list',
        order: 'flexible',
        properties: [
          'list-style',
          'list-style-type',
          'list-style-position',
          'list-style-image',
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'marker',
        order: 'flexible',
        properties: ['marker', 'marker-start', 'marker-mid', 'marker-end'],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'display',
        order: 'flexible',
        properties: [
          'display',
          'opacity',
          'isolation',
          'visibility',
          'backface-visibility',
          'appearance',
          experimental.property.contentVisibility,
        ],
      },
      {
        emptyLineBefore: 'always',
        groupName: 'position',
        noEmptyLineBetween: true,
        order: 'flexible',
        properties: [
          'position',
          'offset',
          'offset-position',
          'offset-path',
          'offset-distance',
          'offset-rotate',
          'offset-anchor',
          'inset',
          'inset-block',
          'inset-block-start',
          'inset-block-end',
          'inset-inline',
          'inset-inline-start',
          'inset-inline-end',
          'z-index',
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'outline',
        order: 'flexible',
        properties: [
          'outline',
          'outline-width',
          'outline-style',
          'outline-color',
          'outline-offset',
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'shape',
        order: 'flexible',
        properties: ['shape-outside', 'shape-margin', 'shape-image-threshold'],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'mask',
        order: 'flexible',
        properties: [
          'mask',
          'mask-border',
          'mask-border-source',
          'mask-border-slice',
          'mask-border-width',
          'mask-border-outset',
          'mask-border-repeat',
          'mask-border-mode',
          'mask-image',
          'mask-clip',
          'mask-origin',
          'mask-type',
          'mask-size',
          'mask-position',
          'mask-repeat',
          'mask-mode',
          'mask-composite',
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'margin',
        order: 'flexible',
        properties: [
          'margin',
          'margin-block',
          'margin-block-start',
          'margin-block-end',
          'margin-inline',
          'margin-inline-start',
          'margin-inline-end',
          experimental.property.marginTrim,
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'border',
        order: 'flexible',
        properties: [
          'border',
          'border-width',
          'border-style',
          'border-color',
          'border-radius',
          'border-start-start-radius',
          'border-start-end-radius',
          'border-end-start-radius',
          'border-end-end-radius',
          'border-block',
          'border-block-width',
          'border-block-style',
          'border-block-color',
          'border-block-start',
          'border-block-start-width',
          'border-block-start-style',
          'border-block-start-color',
          'border-block-end',
          'border-block-end-width',
          'border-block-end-style',
          'border-block-end-color',
          'border-inline',
          'border-inline-width',
          'border-inline-style',
          'border-inline-color',
          'border-inline-start',
          'border-inline-start-width',
          'border-inline-start-style',
          'border-inline-start-color',
          'border-inline-end',
          'border-inline-end-width',
          'border-inline-end-style',
          'border-inline-end-color',
          'border-image',
          'border-image-source',
          'border-image-slice',
          'border-image-width',
          'border-image-outset',
          'border-image-repeat',
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'box',
        order: 'flexible',
        properties: ['box-sizing', 'box-decoration-break', 'box-shadow'],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'object',
        order: 'flexible',
        properties: ['object-fit', 'object-position'],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'dimensions',
        order: 'flexible',
        properties: [
          'aspect-ratio',
          'block-size',
          'min-block-size',
          'max-block-size',
          'inline-size',
          'min-inline-size',
          'max-inline-size',
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'padding',
        order: 'flexible',
        properties: [
          'padding',
          'padding-block',
          'padding-block-start',
          'padding-block-end',
          'padding-inline',
          'padding-inline-start',
          'padding-inline-end',
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'overflow',
        order: 'flexible',
        properties: [
          'overflow',
          'overflow-clip-margin',
          'overflow-block',
          'overflow-inline',
          'overflow-wrap',
          'overflow-anchor',
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'overscroll',
        order: 'flexible',
        properties: [
          'overscroll-behavior',
          'overscroll-behavior-block',
          'overscroll-behavior-inline',
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'scroll',
        order: 'flexible',
        properties: [
          'scroll-margin',
          'scroll-margin-block',
          'scroll-margin-block-start',
          'scroll-margin-block-end',
          'scroll-margin-inline',
          'scroll-margin-inline-start',
          'scroll-margin-inline-end',
          'scroll-padding',
          'scroll-padding-block',
          'scroll-padding-block-start',
          'scroll-padding-block-end',
          'scroll-padding-inline',
          'scroll-padding-inline-start',
          'scroll-padding-inline-end',
          'scroll-snap-type',
          'scroll-snap-align',
          'scroll-snap-stop',
          'scroll-behavior',
          experimental.property.scrollTimeline,
          experimental.property.scrollTimelineAxis,
          experimental.property.scrollTimelineName,
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'scrollbar',
        order: 'flexible',
        properties: ['scrollbar-gutter', 'scrollbar-width', 'scrollbar-color'],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'container',
        order: 'flexible',
        properties: ['container', 'container-name', 'container-type'],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'contain',
        order: 'flexible',
        properties: [
          'contain',
          'contain-intrinsic-size',
          'contain-intrinsic-block-size',
          'contain-intrinsic-inline-size',
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'columns',
        order: 'flexible',
        properties: [
          'columns',
          'column-width',
          'column-count',
          'column-fill',
          'column-span',
          'column-rule',
          'column-rule-width',
          'column-rule-style',
          'column-rule-color',
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'grid',
        order: 'flexible',
        properties: [
          'grid',
          'grid-area',
          'grid-template',
          'grid-template-areas',
          'grid-template-columns',
          'grid-template-rows',
          'grid-auto-flow',
          'grid-auto-columns',
          'grid-column',
          'grid-column-start',
          'grid-column-end',
          'grid-auto-rows',
          'grid-row',
          'grid-row-start',
          'grid-row-end',
          'gap',
          'column-gap',
          'row-gap',
          experimental.property.masonryAutoFlow,
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'flex',
        order: 'flexible',
        properties: [
          'flex',
          'flex-grow',
          'flex-shrink',
          'flex-basis',
          'flex-flow',
          'flex-direction',
          'flex-wrap',
          'order',
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'table',
        order: 'flexible',
        properties: [
          'table-layout',
          'border-spacing',
          'border-collapse',
          'empty-cells',
          'vertical-align',
          'caption-side',
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'alignment',
        order: 'flexible',
        properties: [
          'place-content',
          'place-items',
          'place-self',
          experimental.property.alignTracks,
          'align-content',
          'align-items',
          'align-self',
          experimental.property.justifyTracks,
          'justify-content',
          'justify-items',
          'justify-self',
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'image',
        order: 'flexible',
        properties: [
          'image-orientation',
          'image-rendering',
          experimental.property.imageResolution,
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'typography',
        order: 'flexible',
        properties: [
          'unicode-bidi',
          'unicode-range',
          'tab-size',
          'direction',
          'writing-mode',
          'white-space',
          experimental.property.whiteSpaceCollapse,
          'ruby-position',
          experimental.property.rubyAlign,
          'line-break',
          'line-height',
          experimental.property.lineHeightStep,
          'word-spacing',
          'word-wrap',
          'word-break',
          experimental.property.initialLetter,
          experimental.property.initialLetterAlign,
          'letter-spacing',
          'hyphens',
          'hyphenate-character',
          'hyphenate-limit-chars',
          'hanging-punctuation',
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'text',
        order: 'flexible',
        properties: [
          'text-overflow',
          'text-rendering',
          'text-indent',
          'text-justify',
          'text-orientation',
          'text-shadow',
          'text-transform',
          'text-anchor',
          'text-wrap',
          'text-align',
          'text-align-last',
          experimental.property.textSizeAdjust,
          'text-combine-upright',
          'text-decoration',
          experimental.property.textDecorationSkip,
          'text-decoration-skip-ink',
          'text-decoration-thickness',
          'text-decoration-line',
          'text-decoration-style',
          'text-decoration-color',
          'text-emphasis',
          'text-emphasis-position',
          'text-emphasis-style',
          'text-emphasis-color',
          'text-underline-position',
          'text-underline-offset',
        ],
      },

      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'font',
        order: 'flexible',
        properties: [
          'src',
          'font',
          'font-family',
          'font-size',
          'font-size-adjust',
          'font-weight',
          'font-style',
          'font-display',
          'font-palette',
          'font-kerning',
          'font-stretch',
          nonStandard.property.fontSmooth,
          'font-optical-sizing',
          'font-language-override',
          'font-feature-settings',
          'font-synthesis',
          'font-synthesis-weight',
          'font-synthesis-style',
          'font-synthesis-small-caps',
          'font-variant',
          'font-variant-position',
          'font-variant-ligatures',
          'font-variant-numeric',
          'font-variant-emoji',
          'font-variant-caps',
          'font-variant-east-asian',
          'font-variant-alternates',
          'font-variation-settings',
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'math',
        order: 'flexible',
        properties: ['math-depth', experimental.property.mathShift, 'math-style'],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'svg',
        order: 'flexible',
        properties: ['fill', 'stroke', 'paint-order'],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'color',
        order: 'flexible',
        properties: [
          'color-scheme',
          'accent-color',
          'color',
          'caret-color',
          'forced-color-adjust',
          'print-color-adjust',
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'background',
        order: 'flexible',
        properties: [
          'background',
          'background-image',
          'background-color',
          'background-origin',
          'background-size',
          'background-position',
          'background-position-y',
          'background-position-x',
          'background-repeat',
          'background-attachment',
          'background-clip',
          'background-blend-mode',
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'filter',
        order: 'flexible',
        properties: [
          experimental.property.overlay,
          'filter',
          'backdrop-filter',
          'mix-blend-mode',
          'clip-path',
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'transform',
        order: 'flexible',
        properties: [
          'transform',
          'transform-origin',
          'transform-box',
          'transform-style',
          'translate',
          'scale',
          'rotate',
          'will-change',
          'perspective',
          'perspective-origin',
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'transition',
        order: 'flexible',
        properties: [
          'transition',
          'transition-property',
          'transition-duration',
          'transition-timing-function',
          'transition-delay',
          experimental.property.transitionBehavior,
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'animation',
        order: 'flexible',
        properties: [
          'animation',
          'animation-name',
          'animation-duration',
          'animation-timing-function',
          'animation-delay',
          'animation-iteration-count',
          'animation-direction',
          'animation-fill-mode',
          'animation-play-state',
          'animation-composition',
          experimental.property.animationTimeline,
          experimental.property.animationRange,
          experimental.property.animationRangeStart,
          experimental.property.animationRangeEnd,
          experimental.property.timelineScope,
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'view timeline',
        order: 'flexible',
        properties: [
          experimental.property.viewTimeline,
          experimental.property.viewTimelineName,
          experimental.property.viewTimelineAxis,
          experimental.property.viewTimelineInset,
          experimental.property.viewTransitionName,
        ],
      },
      {
        emptyLineBefore: 'always',
        noEmptyLineBetween: true,
        groupName: 'deprecated',
        order: 'flexible',
        properties: [
          deprecated.property.float,
          deprecated.property.clear,
          deprecated.property.top,
          deprecated.property.right,
          deprecated.property.bottom,
          deprecated.property.left,
          deprecated.property.marginTop,
          deprecated.property.marginRight,
          deprecated.property.marginBottom,
          deprecated.property.marginLeft,
          deprecated.property.borderTop,
          deprecated.property.borderTopLeftRadius,
          deprecated.property.borderTopRightRadius,
          deprecated.property.borderTopWidth,
          deprecated.property.borderTopStyle,
          deprecated.property.borderTopColor,
          deprecated.property.borderRight,
          deprecated.property.borderRightWidth,
          deprecated.property.borderRightStyle,
          deprecated.property.borderRightColor,
          deprecated.property.borderBottom,
          deprecated.property.borderBottomLeftRadius,
          deprecated.property.borderBottomRightRadius,
          deprecated.property.borderBottomWidth,
          deprecated.property.borderBottomStyle,
          deprecated.property.borderBottomColor,
          deprecated.property.borderLeft,
          deprecated.property.borderLeftWidth,
          deprecated.property.borderLeftStyle,
          deprecated.property.borderLeftColor,
          deprecated.property.height,
          deprecated.property.minHeight,
          deprecated.property.maxHeight,
          deprecated.property.width,
          deprecated.property.minWidth,
          deprecated.property.maxWidth,
          deprecated.property.paddingTop,
          deprecated.property.paddingRight,
          deprecated.property.paddingBottom,
          deprecated.property.paddingLeft,
          deprecated.property.overflowY,
          deprecated.property.overflowX,
          deprecated.property.overscrollBehaviorY,
          deprecated.property.overscrollBehaviorX,
          deprecated.property.scrollMarginTop,
          deprecated.property.scrollMarginRight,
          deprecated.property.scrollMarginBottom,
          deprecated.property.scrollMarginLeft,
          deprecated.property.scrollPaddingTop,
          deprecated.property.scrollPaddingRight,
          deprecated.property.scrollPaddingBottom,
          deprecated.property.scrollPaddingLeft,
          deprecated.property.containIntrinsicHeight,
          deprecated.property.containIntrinsicWidth,
        ],
      },
    ],
    {
      unspecified: 'bottomAlphabetical',
    },
  ],
};

export default propertiesOrder;
