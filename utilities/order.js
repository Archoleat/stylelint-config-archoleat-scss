// Copyright (c) 2024 Archoleat

import deprecated from './deprecated.js';
import experimental from './experimental.js';
import nonStandard from './non-standard.js';

const propertiesOrder = {
  'order/order': [
    'custom-properties',
    'dollar-variables',
    {
      type: 'at-rule',
      name: 'include',
      hasBlock: false,
    },
    'declarations',
    {
      type: 'rule',
      selector: '&::selection',
    },
    {
      type: 'rule',
      selector: '&::backdrop',
    },
    {
      type: 'rule',
      selector: '&::before',
    },
    {
      type: 'rule',
      selector: '&::after',
    },
    {
      type: 'rule',
      selector: '&::marker',
    },
    {
      type: 'rule',
      selector: '&::first-line',
    },
    {
      type: 'rule',
      selector: '&::first-letter',
    },
    {
      type: 'rule',
      selector: '&::cue',
    },
    {
      type: 'rule',
      selector: '&::cue-region',
    },
    {
      type: 'rule',
      selector: '&::placeholder',
    },
    {
      type: 'rule',
      selector: '&::file-selector-button',
    },
    {
      type: 'rule',
      selector: '&::highlight',
    },
    {
      type: 'rule',
      selector: '&::part',
    },
    {
      type: 'rule',
      selector: '&::slotted',
    },
    {
      type: 'rule',
      selector: experimental.pseudoElement.targetText,
    },
    {
      type: 'rule',
      selector: experimental.pseudoElement.spellingError,
    },
    {
      type: 'rule',
      selector: experimental.pseudoElement.grammarError,
    },
    {
      type: 'rule',
      selector: experimental.pseudoElement.viewTransition,
    },
    {
      type: 'rule',
      selector: experimental.pseudoElement.viewTransitionGroup,
    },
    {
      type: 'rule',
      selector: experimental.pseudoElement.viewTransitionImagePair,
    },
    {
      type: 'rule',
      selector: experimental.pseudoElement.viewTransitionNew,
    },
    {
      type: 'rule',
      selector: experimental.pseudoElement.viewTransitionOld,
    },
    {
      type: 'rule',
      selector: experimental.pseudoElement.webkit.sliderRunnableTrack,
    },
    {
      type: 'rule',
      selector: experimental.pseudoElement.webkit.sliderThumb,
    },
    {
      type: 'rule',
      selector: experimental.pseudoElement.moz.focusInner,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.webkit.innerSpinButton,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.webkit.meterBar,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.webkit.meterEvenLessGoodValue,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.webkit.meterInnerElement,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.webkit.meterOptimumValue,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.webkit.meterSubOptimumValue,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.webkit.progressBar,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.webkit.progressInnerElement,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.webkit.progressValue,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.webkit.scrollbar,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.webkit.searchResultsButton,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.webkit.searchCancelButton,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.moz.colorSwatch,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.moz.listBullet,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.moz.listNumber,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.moz.page,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.moz.pageSequence,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.moz.pageSequence,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.moz.progressBar,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.moz.rangeTrack,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.moz.rangeProgress,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.moz.rangeThumb,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoElement.moz.scrolledPageSequence,
    },
    'rules',
    {
      type: 'rule',
      selector: '&:root',
    },
    {
      type: 'rule',
      selector: '&:lang',
    },
    {
      type: 'rule',
      selector: '&:scope',
    },
    {
      type: 'rule',
      selector: '&:modal',
    },
    {
      type: 'rule',
      selector: '&:past',
    },
    {
      type: 'rule',
      selector: '&:current',
    },
    {
      type: 'rule',
      selector: '&:future',
    },
    {
      type: 'rule',
      selector: '&:where',
    },
    {
      type: 'rule',
      selector: '&:is',
    },
    {
      type: 'rule',
      selector: '&:has',
    },
    {
      type: 'rule',
      selector: '&:not',
    },
    {
      type: 'rule',
      selector: '&:empty',
    },
    {
      type: 'rule',
      selector: '&:target',
    },
    {
      type: 'rule',
      selector: '&:link',
    },
    {
      type: 'rule',
      selector: '&:local-link',
    },
    {
      type: 'rule',
      selector: '&:any-link',
    },
    {
      type: 'rule',
      selector: '&:defined',
    },
    {
      type: 'rule',
      selector: '&:buffering',
    },
    {
      type: 'rule',
      selector: '&:placeholder-shown',
    },
    {
      type: 'rule',
      selector: '&:right',
    },
    {
      type: 'rule',
      selector: '&:left',
    },
    {
      type: 'rule',
      selector: '&:host',
    },
    {
      type: 'rule',
      selector: '&:host-content',
    },
    {
      type: 'rule',
      selector: '&:only-of-type',
    },
    {
      type: 'rule',
      selector: '&:first-of-type',
    },
    {
      type: 'rule',
      selector: '&:nth-of-type',
    },
    {
      type: 'rule',
      selector: '&:last-of-type',
    },
    {
      type: 'rule',
      selector: '&:nth-last-of-type',
    },
    {
      type: 'rule',
      selector: '&:only-child',
    },
    {
      type: 'rule',
      selector: '&:first',
    },
    {
      type: 'rule',
      selector: '&:first-child',
    },
    {
      type: 'rule',
      selector: '&:nth-child',
    },
    {
      type: 'rule',
      selector: '&:last-child',
    },
    {
      type: 'rule',
      selector: '&:nth-last-child',
    },
    {
      type: 'rule',
      selector: experimental.pseudoClass.targetWithin,
    },
    {
      type: 'rule',
      selector: experimental.pseudoClass.blank,
    },
    {
      type: 'rule',
      selector: '&:default',
    },
    {
      type: 'rule',
      selector: '&:enabled',
    },
    {
      type: 'rule',
      selector: '&:disabled',
    },
    {
      type: 'rule',
      selector: '&:hover',
    },
    {
      type: 'rule',
      selector: '&:focus',
    },
    {
      type: 'rule',
      selector: '&:focus-within',
    },
    {
      type: 'rule',
      selector: '&:focus-visible',
    },
    {
      type: 'rule',
      selector: '&:active',
    },
    {
      type: 'rule',
      selector: '&:checked',
    },
    {
      type: 'rule',
      selector: '&:visited',
    },
    {
      type: 'rule',
      selector: '&:indeterminate',
    },
    {
      type: 'rule',
      selector: '&:in-range',
    },
    {
      type: 'rule',
      selector: '&:out-of-range',
    },
    {
      type: 'rule',
      selector: '&:valid',
    },
    {
      type: 'rule',
      selector: '&:invalid',
    },
    {
      type: 'rule',
      selector: '&:user-valid',
    },
    {
      type: 'rule',
      selector: '&:user-invalid',
    },
    {
      type: 'rule',
      selector: '&:read-only',
    },
    {
      type: 'rule',
      selector: '&:read-write',
    },
    {
      type: 'rule',
      selector: '&:optional',
    },
    {
      type: 'rule',
      selector: '&:required',
    },
    {
      type: 'rule',
      selector: '&:popover-open',
    },
    {
      type: 'rule',
      selector: '&:fullscreen',
    },
    {
      type: 'rule',
      selector: '&:picture-in-picture',
    },
    {
      type: 'rule',
      selector: '&:autofill',
    },
    {
      type: 'rule',
      selector: '&:playing',
    },
    {
      type: 'rule',
      selector: '&:paused',
    },
    {
      type: 'rule',
      selector: '&:stalled',
    },
    {
      type: 'rule',
      selector: '&:muted',
    },
    {
      type: 'rule',
      selector: '&:volume-locked',
    },
    {
      type: 'rule',
      selector: '&:seeking',
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.broken,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.dragOver,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.firstNode,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.lastNode,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.handlerBlocked,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.handlerCrashed,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.handlerDisabled,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.loading,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.localeDir,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.onlyWhitespace,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.submitInvalid,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.suppressed,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.userDisabled,
    },
    {
      type: 'rule',
      selector: nonStandard.pseudoClass.moz.windowInactive,
    },
    {
      type: 'rule',
      selector: '&\\[[^\\[\\]]+\\]',
    },
    {
      type: 'rule',
      selector: '&\\..+',
    },
    {
      type: 'rule',
      selector: '&--.+',
    },
    {
      type: 'rule',
      selector: '.* &',
    },
    {
      type: 'at-rule',
      name: 'include',
      hasBlock: true,
    },
    'at-rules',
  ],
  'order/properties-alphabetical-order': null,
  'order/properties-order': [
    [
      'all',
      'page',
      'break-before',
      'break-inside',
      'break-after',
      'orphans',
      'widows',
      'display',
      'opacity',
      'isolation',
      'visibility',
      'backface-visibility',
      'appearance',
      experimental.property.contentVisibility,
      'cursor',
      'content',
      'quotes',
      'counter-increment',
      'counter-set',
      'counter-reset',
      'position',
      'inset',
      'inset-block',
      'inset-block-start',
      'inset-block-end',
      'inset-inline',
      'inset-inline-start',
      'inset-inline-end',
      'z-index',
      deprecated.property.float,
      deprecated.property.clear,
      deprecated.property.top,
      deprecated.property.right,
      deprecated.property.bottom,
      deprecated.property.left,
      'columns',
      'column-width',
      'column-count',
      'column-fill',
      'column-span',
      'column-rule',
      'column-rule-width',
      'column-rule-style',
      'column-rule-color',
      'flex',
      'flex-grow',
      'flex-shrink',
      'flex-basis',
      'flex-flow',
      'flex-direction',
      'flex-wrap',
      'order',
      'grid',
      'grid-area',
      'grid-template',
      'grid-template-areas',
      'grid-template-columns',
      'grid-template-rows',
      'grid-auto-flow',
      'grid-auto-columns',
      'grid-auto-rows',
      'grid-column',
      'grid-column-start',
      'grid-column-end',
      'grid-row',
      'grid-row-start',
      'grid-row-end',
      'gap',
      'column-gap',
      'row-gap',
      experimental.property.masonryAutoFlow,
      'table-layout',
      'border-spacing',
      'border-collapse',
      'empty-cells',
      'vertical-align',
      'caption-side',
      'place-content',
      'place-items',
      'place-self',
      'align-content',
      'align-items',
      'align-self',
      'justify-content',
      'justify-items',
      'justify-self',
      experimental.property.alignTracks,
      experimental.property.justifyTracks,
      'container',
      'container-name',
      'container-type',
      'contain',
      'contain-intrinsic-size',
      'contain-intrinsic-block-size',
      'contain-intrinsic-inline-size',
      deprecated.property.containIntrinsicHeight,
      deprecated.property.containIntrinsicWidth,
      'overflow',
      'overflow-clip-margin',
      'overflow-block',
      'overflow-inline',
      'overflow-wrap',
      'overflow-anchor',
      deprecated.property.overflowY,
      deprecated.property.overflowX,
      'offset',
      'offset-position',
      'offset-path',
      'offset-distance',
      'offset-rotate',
      'offset-anchor',
      'outline',
      'outline-width',
      'outline-style',
      'outline-color',
      'outline-offset',
      'margin',
      'margin-block',
      'margin-block-start',
      'margin-block-end',
      'margin-inline',
      'margin-inline-start',
      'margin-inline-end',
      experimental.property.marginTrim,
      deprecated.property.marginTop,
      deprecated.property.marginRight,
      deprecated.property.marginBottom,
      deprecated.property.marginLeft,
      'border',
      'border-style',
      'border-color',
      'border-radius',
      'border-start-start-radius',
      'border-start-end-radius',
      'border-end-start-radius',
      'border-end-end-radius',
      'border-block',
      'border-block-width',
      'border-block-style',
      'border-block-color',
      'border-block-start',
      'border-block-start-width',
      'border-block-start-style',
      'border-block-start-color',
      'border-block-end',
      'border-block-end-width',
      'border-block-end-style',
      'border-block-end-color',
      'border-inline',
      'border-inline-width',
      'border-inline-style',
      'border-inline-color',
      'border-inline-start',
      'border-inline-start-width',
      'border-inline-start-style',
      'border-inline-start-color',
      'border-inline-end',
      'border-inline-end-width',
      'border-inline-end-style',
      'border-inline-end-color',
      'border-image',
      'border-image-source',
      'border-image-slice',
      'border-image-width',
      'border-image-outset',
      'border-image-repeat',
      deprecated.property.borderHeight,
      deprecated.property.borderWidth,
      deprecated.property.borderTop,
      deprecated.property.borderTopLeftRadius,
      deprecated.property.borderTopRightRadius,
      deprecated.property.borderTopWidth,
      deprecated.property.borderTopStyle,
      deprecated.property.borderTopColor,
      deprecated.property.borderRight,
      deprecated.property.borderRightWidth,
      deprecated.property.borderRightStyle,
      deprecated.property.borderRightColor,
      deprecated.property.borderBottom,
      deprecated.property.borderBottomLeftRadius,
      deprecated.property.borderBottomRightRadius,
      deprecated.property.borderBottomWidth,
      deprecated.property.borderBottomStyle,
      deprecated.property.borderBottomColor,
      deprecated.property.borderLeft,
      deprecated.property.borderLeftWidth,
      deprecated.property.borderLeftStyle,
      deprecated.property.borderLeftColor,
      'box-sizing',
      'box-decoration-break',
      'box-shadow',
      'aspect-ratio',
      'block-size',
      'min-block-size',
      'max-block-size',
      'inline-size',
      'min-inline-size',
      'max-inline-size',
      deprecated.property.height,
      deprecated.property.minHeight,
      deprecated.property.maxHeight,
      deprecated.property.width,
      deprecated.property.minWidth,
      deprecated.property.maxWidth,
      'padding',
      'padding-block',
      'padding-block-start',
      'padding-block-end',
      'padding-inline',
      'padding-inline-start',
      'padding-inline-end',
      deprecated.property.paddingTop,
      deprecated.property.paddingRight,
      deprecated.property.paddingBottom,
      deprecated.property.paddingLeft,
      'shape-outside',
      'shape-margin',
      'shape-image-threshold',
      'mask',
      'mask-border',
      'mask-border-source',
      'mask-border-slice',
      'mask-border-width',
      'mask-border-outset',
      'mask-border-repeat',
      'mask-border-mode',
      'mask-image',
      'mask-mode',
      'mask-position',
      'mask-size',
      'mask-repeat',
      'mask-origin',
      'mask-clip',
      'mask-composite',
      'mask-type',
      'direction',
      'writing-mode',
      'tab-size',
      'white-space',
      'word-wrap',
      'word-spacing',
      'word-break',
      'letter-spacing',
      'line-break',
      'line-height',
      'ruby-position',
      'hyphens',
      'hyphenate-character',
      'hyphenate-limit-chars',
      'hanging-punctuation',
      'unicode-bidi',
      'unicode-range',
      experimental.property.whiteSpaceCollapse,
      experimental.property.initialLetter,
      experimental.property.initialLetterAlign,
      experimental.property.lineHeightStep,
      experimental.property.rubyAlign,
      'text-overflow',
      'text-rendering',
      'text-indent',
      'text-justify',
      'text-orientation',
      'text-shadow',
      'text-transform',
      'text-anchor',
      'text-wrap',
      'text-align',
      'text-align-last',
      'text-combine-upright',
      'text-decoration',
      'text-decoration-skip-ink',
      'text-decoration-thickness',
      'text-decoration-line',
      'text-decoration-style',
      'text-decoration-color',
      'text-emphasis',
      'text-emphasis-position',
      'text-emphasis-style',
      'text-emphasis-color',
      'text-underline-position',
      'text-underline-offset',
      experimental.property.textSizeAdjust,
      experimental.property.textDecorationSkip,
      'src',
      'font',
      'font-family',
      'font-size',
      'font-size-adjust',
      'font-weight',
      'font-style',
      'font-display',
      'font-feature-settings',
      'font-kerning',
      'font-language-override',
      'font-optical-sizing',
      'font-palette',
      'font-stretch',
      'font-synthesis',
      'font-synthesis-small-caps',
      'font-synthesis-style',
      'font-synthesis-weight',
      'font-variant',
      'font-variant-alternates',
      'font-variant-caps',
      'font-variant-east-asian',
      'font-variant-emoji',
      'font-variant-ligatures',
      'font-variant-numeric',
      'font-variant-position',
      'font-variation-settings',
      nonStandard.property.fontSmooth,
      'object-fit',
      'object-position',
      'image-orientation',
      'image-rendering',
      experimental.property.imageResolution,
      'background',
      'background-image',
      'background-color',
      'background-origin',
      'background-size',
      'background-position',
      'background-position-y',
      'background-position-x',
      'background-repeat',
      'background-attachment',
      'background-clip',
      'background-blend-mode',
      'color-scheme',
      'accent-color',
      'color',
      'caret-color',
      'forced-color-adjust',
      'print-color-adjust',
      'fill',
      'stroke',
      'paint-order',
      'transform',
      'transform-box',
      'transform-origin',
      'transform-style',
      'translate',
      'scale',
      'rotate',
      'perspective',
      'perspective-origin',
      'transition',
      'transition-property',
      'transition-duration',
      'transition-timing-function',
      'transition-delay',
      experimental.property.transitionBehavior,
      'animation',
      'animation-name',
      'animation-duration',
      'animation-timing-function',
      'animation-delay',
      'animation-iteration-count',
      'animation-direction',
      'animation-fill-mode',
      'animation-play-state',
      'animation-composition',
      'will-change',
      experimental.property.animationTimeline,
      experimental.property.animationRange,
      experimental.property.animationRangeStart,
      experimental.property.animationRangeEnd,
      'list-style',
      'list-style-type',
      'list-style-position',
      'list-style-image',
      'pointer-events',
      'touch-action',
      'user-select',
      'user-zoom',
      'resize',
      nonStandard.property.zoom,
      'filter',
      'backdrop-filter',
      'clip-path',
      'mix-blend-mode',
      experimental.property.overlay,
      'marker',
      'marker-start',
      'marker-mid',
      'marker-end',
      'math-depth',
      'math-style',
      experimental.property.mathShift,
      experimental.property.timelineScope,
      experimental.property.viewTimeline,
      experimental.property.viewTimelineName,
      experimental.property.viewTimelineAxis,
      experimental.property.viewTimelineInset,
      experimental.property.viewTransitionName,
      'overscroll-behavior',
      'overscroll-behavior-block',
      'overscroll-behavior-inline',
      deprecated.property.overscrollBehaviorY,
      deprecated.property.overscrollBehaviorX,
      'scroll-behavior',
      'scroll-margin',
      'scroll-margin-block',
      'scroll-margin-block-start',
      'scroll-margin-block-end',
      'scroll-margin-inline',
      'scroll-margin-inline-start',
      'scroll-margin-inline-end',
      'scroll-padding',
      'scroll-padding-block',
      'scroll-padding-block-start',
      'scroll-padding-block-end',
      'scroll-padding-inline',
      'scroll-padding-inline-start',
      'scroll-padding-inline-end',
      'scroll-snap-type',
      'scroll-snap-align',
      'scroll-snap-stop',
      experimental.property.scrollTimeline,
      experimental.property.scrollTimelineAxis,
      experimental.property.scrollTimelineName,
      deprecated.property.scrollMarginTop,
      deprecated.property.scrollMarginRight,
      deprecated.property.scrollMarginBottom,
      deprecated.property.scrollMarginLeft,
      deprecated.property.scrollPaddingTop,
      deprecated.property.scrollPaddingRight,
      deprecated.property.scrollPaddingBottom,
      deprecated.property.scrollPaddingLeft,
      'scrollbar-gutter',
      'scrollbar-width',
      'scrollbar-color',
    ],
    {
      unspecified: 'bottomAlphabetical',
    },
  ],
};

export default propertiesOrder;
