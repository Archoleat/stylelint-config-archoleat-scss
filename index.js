// Copyright (c) 2024 Conqueror Site Builder

import experimental from './utils/experimental.js';
import nonStandard from './utils/non-standard.js';

export default {
  extends: ['stylelint-config-standard-scss'],
  plugins: [
    'stylelint-high-performance-animation',
    'stylelint-order',
    'stylelint-plugin-defensive-css',
    'stylelint-plugin-logical-css',
    'stylelint-prettier',
  ],
  rules: {
    'prettier/prettier': true,
    'order/order': [
      'custom-properties',
      'dollar-variables',
      {
        type: 'at-rule',
        name: 'include',
        hasBlock: false,
      },
      'declarations',
      {
        type: 'rule',
        selector: '&::backdrop',
      },
      {
        type: 'rule',
        selector: '&::before',
      },
      {
        type: 'rule',
        selector: '&::after',
      },
      {
        type: 'rule',
        selector: '&::part',
      },
      {
        type: 'rule',
        selector: '&::slotted',
      },
      {
        type: 'rule',
        selector: '&::selection',
      },
      {
        type: 'rule',
        selector: experimental.pseudoElement.targetText,
      },
      {
        type: 'rule',
        selector: '&::first-line',
      },
      {
        type: 'rule',
        selector: '&::first-letter',
      },
      {
        type: 'rule',
        selector: '&::marker',
      },
      {
        type: 'rule',
        selector: '&::cue',
      },
      {
        type: 'rule',
        selector: '&::cue-region',
      },
      {
        type: 'rule',
        selector: '&::placeholder',
      },
      {
        type: 'rule',
        selector: '&::file-selector-button',
      },
      {
        type: 'rule',
        selector: '&::highlight',
      },

      {
        type: 'rule',
        selector: experimental.pseudoElement.spellingError,
      },
      {
        type: 'rule',
        selector: experimental.pseudoElement.grammarError,
      },
      {
        type: 'rule',
        selector: experimental.pseudoElement.viewTransition,
      },
      {
        type: 'rule',
        selector: experimental.pseudoElement.viewTransitionGroup,
      },
      {
        type: 'rule',
        selector: experimental.pseudoElement.viewTransitionImagePair,
      },
      {
        type: 'rule',
        selector: experimental.pseudoElement.viewTransitionNew,
      },
      {
        type: 'rule',
        selector: experimental.pseudoElement.viewTransitionOld,
      },
      'rules',
      //? Pseudo Classes
      //* Document Structure
      {
        type: 'rule',
        selector: '&:root',
      },
      {
        type: 'rule',
        selector: '&:modal',
      },
      //!
      {
        type: 'rule',
        selector: '&:where',
      },
      {
        type: 'rule',
        selector: '&:is',
      },
      {
        type: 'rule',
        selector: '&:has',
      },
      {
        type: 'rule',
        selector: '&:not',
      },
      //!
      {
        type: 'rule',
        selector: '&:placeholder-shown',
      },

      {
        type: 'rule',
        selector: '&:lang',
      },
      {
        type: 'rule',
        selector: '&:scope',
      },
      {
        type: 'rule',
        selector: '&:link',
      },
      {
        type: 'rule',
        selector: '&:local-link',
      },
      {
        type: 'rule',
        selector: '&:any-link',
      },

      {
        type: 'rule',
        selector: '&:target',
      },
      {
        type: 'rule',
        selector: experimental.pseudoClass.targetWithin,
      },

      {
        type: 'rule',
        selector: '&:right',
      },
      {
        type: 'rule',
        selector: '&:left',
      },

      {
        type: 'rule',
        selector: '&:empty',
      },

      {
        type: 'rule',
        selector: '&:defined',
      },
      {
        type: 'rule',
        selector: '&:host',
      },

      {
        type: 'rule',
        selector: '&:host-content',
      },

      {
        type: 'rule',
        selector: experimental.pseudoClass.blank,
      },

      {
        type: 'rule',
        selector: '&:buffering',
      },
      {
        type: 'rule',
        selector: '&:past',
      },
      {
        type: 'rule',
        selector: '&:current',
      },
      {
        type: 'rule',
        selector: '&:future',
      },
      //!
      {
        type: 'rule',
        selector: '&:only-of-type',
      },
      {
        type: 'rule',
        selector: '&:first-of-type',
      },
      {
        type: 'rule',
        selector: '&:nth-of-type',
      },
      {
        type: 'rule',
        selector: '&:last-of-type',
      },
      {
        type: 'rule',
        selector: '&:nth-last-of-type',
      },
      //!
      {
        type: 'rule',
        selector: '&:only-child',
      },
      {
        type: 'rule',
        selector: '&:first',
      },
      {
        type: 'rule',
        selector: '&:first-child',
      },
      {
        type: 'rule',
        selector: '&:nth-child',
      },
      {
        type: 'rule',
        selector: '&:last-child',
      },
      {
        type: 'rule',
        selector: '&:nth-last-child',
      },
      //* User Interaction
      {
        type: 'rule',
        selector: '&:default',
      },
      {
        type: 'rule',
        selector: '&:enabled',
      },
      {
        type: 'rule',
        selector: '&:disabled',
      },
      {
        type: 'rule',
        selector: '&:hover',
      },
      {
        type: 'rule',
        selector: '&:focus',
      },
      {
        type: 'rule',
        selector: '&:focus-within',
      },
      {
        type: 'rule',
        selector: '&:focus-visible',
      },
      {
        type: 'rule',
        selector: '&:active',
      },
      {
        type: 'rule',
        selector: '&:checked',
      },
      {
        type: 'rule',
        selector: '&:visited',
      },
      {
        type: 'rule',
        selector: '&:indeterminate',
      },
      {
        type: 'rule',
        selector: '&:in-range',
      },
      {
        type: 'rule',
        selector: '&:out-of-range',
      },
      {
        type: 'rule',
        selector: '&:valid',
      },
      {
        type: 'rule',
        selector: '&:invalid',
      },
      {
        type: 'rule',
        selector: '&:user-valid',
      },
      {
        type: 'rule',
        selector: '&:user-invalid',
      },
      {
        type: 'rule',
        selector: '&:read-only',
      },
      {
        type: 'rule',
        selector: '&:read-write',
      },
      {
        type: 'rule',
        selector: '&:optional',
      },
      {
        type: 'rule',
        selector: '&:required',
      },
      //* Media Controls
      {
        type: 'rule',
        selector: '&:popover-open',
      },
      {
        type: 'rule',
        selector: '&:fullscreen',
      },
      {
        type: 'rule',
        selector: '&:picture-in-picture',
      },
      {
        type: 'rule',
        selector: '&:autofill',
      },
      {
        type: 'rule',
        selector: '&:playing',
      },
      {
        type: 'rule',
        selector: '&:paused',
      },
      {
        type: 'rule',
        selector: '&:stalled',
      },
      {
        type: 'rule',
        selector: '&:muted',
      },
      {
        type: 'rule',
        selector: '&:volume-locked',
      },
      {
        type: 'rule',
        selector: '&:seeking',
      },

      {
        type: 'rule',
        selector: '&\\[[^\\[\\]]+\\]',
      },
      {
        type: 'rule',
        selector: '&\\..+',
      },
      {
        type: 'rule',
        selector: '&--.+',
      },
      {
        type: 'rule',
        selector: '.* &',
      },
      {
        type: 'at-rule',
        name: 'include',
        hasBlock: true,
      },
      'at-rules',
    ],
    'order/properties-alphabetical-order': null,
    'order/properties-order': [
      [
        // All
        'all',
        'page',
        'appearance',
        'counter-increment',
        'counter-set',
        'counter-reset',
        'content',
        'quotes',
        'break-before',
        'break-inside',
        'break-after',
        'orphans',
        'widows',
        'clear',
        // Position
        'float',
        'inline-start',
        'inline-end',
        'position',
        'inset',
        'inset-block',
        'inset-block-start',
        'inset-block-end',
        'inset-inline',
        'inset-inline-start',
        'inset-inline-end',
        'top',
        'right',
        'bottom',
        'left',
        'z-index',
        'display',
        // Columns
        'columns',
        'column-width',
        'column-count',
        'column-fill',
        'column-span',
        'column-rule',
        'column-rule-width',
        'column-rule-style',
        'column-rule-color',
        // Flex
        'flex',
        'flex-grow',
        'flex-shrink',
        'flex-basis',
        'flex-flow',
        'flex-direction',
        'flex-wrap',
        'order',
        // Grid
        'grid',
        'grid-area',
        'grid-auto-columns',
        'grid-auto-flow',
        'grid-auto-rows',
        'grid-column',
        'grid-column-start',
        'grid-column-end',
        'grid-row',
        'grid-row-start',
        'grid-row-end',
        'grid-template',
        'grid-template-areas',
        'grid-template-columns',
        'grid-template-rows',
        'gap',
        'column-gap',
        'row-gap',
        experimental.property.masonryAutoFlow,
        // Table
        'border-collapse',
        'border-spacing',
        'caption-side',
        'empty-cells',
        'table-layout',
        'vertical-align',
        // Alignment
        'place-content',
        'place-items',
        'place-self',
        'align-content',
        'align-items',
        'align-self',
        experimental.property.alignTracks,
        'justify-content',
        'justify-items',
        'justify-self',
        experimental.property.justifyTracks,
        // Mask
        'mask',
        'mask-border',
        'mask-border-source',
        'mask-border-slice',
        'mask-border-width',
        'mask-border-outset',
        'mask-border-repeat',
        'mask-border-mode',
        'mask-image',
        'mask-mode',
        'mask-position',
        'mask-size',
        'mask-repeat',
        'mask-origin',
        'mask-clip',
        'mask-composite',
        'mask-type',
        // Overflow
        'overflow',
        'overflow-clip-margin',
        'overflow-y',
        'overflow-x',
        'overflow-block',
        'overflow-inline',
        'overflow-wrap',
        'overflow-anchor',
        // Shape
        'shape-outside',
        'shape-margin',
        'shape-image-threshold',
        // Container
        'container',
        'container-name',
        'container-type',
        // Contain
        'contain',
        'contain-intrinsic-size',
        'contain-intrinsic-block-size',
        'contain-intrinsic-inline-size',
        'contain-intrinsic-height',
        'contain-intrinsic-width',
        // Margin
        'margin',
        'margin-trim',
        'margin-block',
        'margin-block-start',
        'margin-block-end',
        'margin-inline',
        'margin-inline-start',
        'margin-inline-end',
        'margin-top',
        'margin-right',
        'margin-bottom',
        'margin-left',
        // Outline
        'outline',
        'outline-width',
        'outline-style',
        'outline-color',
        'outline-offset',
        // Border
        'border',
        'border-width',
        'border-style',
        'border-color',
        'border-radius',
        'border-start-start-radius',
        'border-start-end-radius',
        'border-end-start-radius',
        'border-end-end-radius',

        'border-block',
        'border-block-width',
        'border-block-style',
        'border-block-color',

        'border-block-start',
        'border-block-start-width',
        'border-block-start-style',
        'border-block-start-color',

        'border-block-end',
        'border-block-end-width',
        'border-block-end-style',
        'border-block-end-color',

        'border-inline',
        'border-inline-width',
        'border-inline-style',
        'border-inline-color',

        'border-inline-start',
        'border-inline-start-width',
        'border-inline-start-style',
        'border-inline-start-color',

        'border-inline-end',
        'border-inline-end-width',
        'border-inline-end-style',
        'border-inline-end-color',

        'border-top',
        'border-top-left-radius',
        'border-top-right-radius',
        'border-top-width',
        'border-top-style',
        'border-top-color',

        'border-right',
        'border-right-width',
        'border-right-style',
        'border-right-color',

        'border-bottom',
        'border-bottom-left-radius',
        'border-bottom-right-radius',
        'border-bottom-width',
        'border-bottom-style',
        'border-bottom-color',

        'border-left',
        'border-left-width',
        'border-left-style',
        'border-left-color',

        'border-image',
        'border-image-source',
        'border-image-slice',
        'border-image-width',
        'border-image-outset',
        'border-image-repeat',
        // Sizes
        'aspect-ratio',
        'box-sizing',
        'height',
        'min-height',
        'max-height',
        'block-size',
        'min-block-size',
        'max-block-size',
        'width',
        'min-width',
        'max-width',
        'inline-size',
        'min-inline-size',
        'max-inline-size',

        'box-decoration-break',
        'box-shadow',

        // Inner
        'padding',
        'padding-block',
        'padding-block-start',
        'padding-block-end',
        'padding-inline',
        'padding-inline-start',
        'padding-inline-end',
        'padding-top',
        'padding-right',
        'padding-bottom',
        'padding-left',
        // Fonts
        'src',
        'font',
        'font-family',
        'font-size',
        'font-size-adjust',
        'font-weight',
        'font-style',
        'font-display',
        nonStandard.property.fontSmooth,
        'font-feature-settings',
        'font-kerning',
        'font-language-override',
        'font-optical-sizing',
        'font-palette',
        'font-stretch',
        'font-synthesis',
        'font-synthesis-small-caps',
        'font-synthesis-style',
        'font-synthesis-weight',
        'font-variant',
        'font-variant-alternates',
        'font-variant-caps',
        'font-variant-east-asian',
        'font-variant-emoji',
        'font-variant-ligatures',
        'font-variant-numeric',
        'font-variant-position',
        'font-variation-settings',
        // Text
        'text-overflow',
        'text-rendering',
        'text-indent',
        'text-justify',
        'text-orientation',
        'text-shadow',
        'text-transform',
        'text-anchor',
        'text-wrap',
        'text-align',
        'text-align-last',
        experimental.property.textSizeAdjust,
        'text-combine-upright',

        'text-decoration',
        experimental.property.textDecorationSkip,
        'text-decoration-skip-ink',
        'text-decoration-thickness',
        'text-decoration-line',
        'text-decoration-style',
        'text-decoration-color',

        'text-emphasis',
        'text-emphasis-position',
        'text-emphasis-style',
        'text-emphasis-color',

        'text-underline-position',
        'text-underline-offset',
        // Typography
        'direction',
        'writing-mode',
        'word-wrap',
        'word-spacing',
        'word-break',
        experimental.property.initialLetter,
        experimental.property.initialLetterAlign,
        'line-break',
        'line-height',
        experimental.property.lineHeightStep,
        'letter-spacing',
        'white-space',
        experimental.property.whiteSpaceCollapse,
        'hyphens',
        'hyphenate-character',
        'hyphenate-limit-chars',
        'tab-size',
        'hanging-punctuation',
        'ruby-position',
        experimental.property.rubyAlign,
        'unicode-bidi',
        'unicode-range',
        'forced-color-adjust',
        // Color
        'color-scheme',
        'color',
        'accent-color',
        'caret-color',
        // SVG
        'fill',
        'fill-rule',
        'fill-opacity',
        'stroke',
        'stroke-dashoffset',
        'stroke-dasharray',
        'stroke-width',
        'stroke-linecap',
        'stroke-linejoin',
        'stroke-miterlimit',
        'stroke-opacity',
        // Other
        'clip-path',
        'clip-rule',
        'color-interpolation-filters',
        'flood-color',
        'flood-opacity',
        'lighting-color',
        // List
        'list-style',
        'list-style-type',
        'list-style-position',
        'list-style-image',
        // Marker
        'marker',
        'marker-start',
        'marker-mid',
        'marker-end',
        // Paint
        'paint-order',
        // Other
        'stop-color',
        'stop-opacity',
        // Offset
        'offset',
        'offset-position',
        'offset-path',
        'offset-distance',
        'offset-rotate',
        'offset-anchor',
        // Background
        'background',
        'background-image',
        'background-color',
        'background-origin',
        'background-size',
        'background-position',
        'background-position-y',
        'background-position-x',
        'background-repeat',
        'background-attachment',
        'background-clip',
        'background-blend-mode',
        // Image
        'object-fit',
        'object-position',
        'image-orientation',
        'image-rendering',
        experimental.property.imageResolution,
        // Filters
        'opacity',
        'visibility',
        experimental.property.contentVisibility,
        'backface-visibility',
        'isolation',
        'filter',
        experimental.property.overlay,
        'backdrop-filter',
        'mix-blend-mode',
        // Transform
        'transform',
        'transform-box',
        'transform-origin',
        'transform-style',
        'translate',
        'scale',
        'rotate',
        'perspective',
        'perspective-origin',
        // Transition
        'transition',
        'transition-property',
        'transition-duration',
        'transition-timing-function',
        'transition-delay',
        experimental.property.transitionBehavior,
        // Animation
        'animation',
        'animation-name',
        'animation-duration',
        'animation-timing-function',
        'animation-delay',
        'animation-iteration-count',
        'animation-direction',
        'animation-fill-mode',
        'animation-play-state',
        experimental.property.animationTimeline,
        'animation-composition',
        experimental.property.animationRange,
        experimental.property.animationRangeStart,
        experimental.property.animationRangeEnd,
        'will-change',
        // View Timeline
        experimental.property.timelineScope,
        experimental.property.viewTimeline,
        experimental.property.viewTimelineName,
        experimental.property.viewTimelineAxis,
        experimental.property.viewTimelineInset,
        experimental.property.viewTransitionName,
        // Other
        'cursor',
        'pointer-events',
        'touch-action',
        'user-select',
        'user-zoom',
        nonStandard.property.zoom,
        'resize',
        // Math
        'math-depth',
        'math-shift',
        'math-style',
        // Overscroll
        'overscroll-behavior',
        'overscroll-behavior-y',
        'overscroll-behavior-x',
        'overscroll-behavior-block',
        'overscroll-behavior-inline',
        // Scroll
        'scroll-behavior',
        'scroll-margin',
        'scroll-margin-block',
        'scroll-margin-block-start',
        'scroll-margin-block-end',
        'scroll-margin-inline',
        'scroll-margin-inline-start',
        'scroll-margin-inline-end',
        'scroll-margin-top',
        'scroll-margin-right',
        'scroll-margin-bottom',
        'scroll-margin-left',
        'scroll-padding',
        'scroll-padding-block',
        'scroll-padding-block-start',
        'scroll-padding-block-end',
        'scroll-padding-inline',
        'scroll-padding-inline-start',
        'scroll-padding-inline-end',
        'scroll-padding-top',
        'scroll-padding-right',
        'scroll-padding-bottom',
        'scroll-padding-left',
        'scroll-snap-type',
        'scroll-snap-align',
        'scroll-snap-stop',
        experimental.property.scrollTimeline,
        experimental.property.scrollTimelineAxis,
        experimental.property.scrollTimelineName,
        // Scrollbar
        'scrollbar-width',
        'scrollbar-gutter',
        'scrollbar-color',
      ],
      {
        unspecified: 'bottomAlphabetical',
      },
    ],
    'media-feature-name-value-no-unknown': true,
    'selector-class-pattern':
      '^[a-z][a-z0-9]*(-[a-z0-9]+)*(__[a-z0-9]+(-[a-z0-9]+)*)?(--[a-z0-9]+(-[a-z0-9]+)*)?$',
    'selector-max-combinators': 4,
    'selector-max-compound-selectors': 4,
    'selector-max-id': 1,
    'selector-max-universal': 1,
    'selector-no-qualifying-type': [
      true,
      {
        ignore: ['attribute'],
      },
    ],
    'no-descending-specificity': null,
    'max-nesting-depth': [
      4,
      {
        ignore: ['blockless-at-rules'],
      },
    ],
    'function-url-no-scheme-relative': true,
    'value-keyword-case': [
      'lower',
      {
        ignoreProperties: ['text-rendering'],
      },
    ],
    'declaration-no-important': true,
    'font-family-name-quotes': 'always-unless-keyword',
    'font-weight-notation': 'numeric',
    'color-named': 'never',
    'alpha-value-notation': 'number',
    'keyframe-selector-notation': 'percentage',
    'no-unknown-animations': true,
    'time-min-milliseconds': [
      100,
      {
        ignore: ['delay'],
      },
    ],
    'scss/partial-no-import': true,
    'scss/at-root-no-redundant': true,
    'scss/at-use-no-redundant-alias': true,
    'scss/selector-no-redundant-nesting-selector': true,
    'scss/dollar-variable-colon-newline-after': 'always-multi-line',
    'scss/dollar-variable-no-namespaced-assignment': true,
    'scss/media-feature-value-dollar-variable': 'always',
    'scss/no-duplicate-dollar-variables': true,
    'scss/at-function-named-arguments': 'never',
    'scss/function-color-relative': true,
    'scss/at-mixin-named-arguments': 'never',
    'scss/comment-no-loud': true,
    'scss/double-slash-comment-inline': 'never',
    'scss/at-each-key-value-single-line': true,
    'scss/dimension-no-non-numeric-values': true,
    'scss/map-keys-quotes': 'always',
    'scss/declaration-nested-properties': 'never',
    'scss/property-no-unknown': true,
    'plugin/no-low-performance-animation-properties': true,
    'plugin/use-defensive-css': [
      true,
      {
        'accidental-hover': true,
        'background-repeat': true,
        'custom-property-fallbacks': true,
        'flex-wrapping': true,
        'scroll-chaining': true,
        'vendor-prefix-grouping': true,
      },
    ],
    'plugin/use-logical-properties-and-values': true,
    'plugin/use-logical-units': true,
  },
};
