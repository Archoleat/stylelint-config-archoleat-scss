import { patterns } from '#shared';

import { createAtRule, createLogicalGroup, createRule } from '#features';

import { deprecated } from './deprecated.ts';
import { experimental } from './experimental.ts';
import { nonStandard } from './non-standard.ts';

const experimentalPseudoElement = experimental.pseudo.element;
const experimentalPseudoElementMozilla = experimental.pseudo.element.moz;
const experimentalPseudoElementWebkit = experimental.pseudo.element.webkit;
const nonStandardPseudoElementMozilla = nonStandard.pseudo.element.moz;
const nonStandardPseudoElementWebkit = nonStandard.pseudo.element.webkit;

const experimentalPseudoClass = experimental.pseudo.class;
const nonStandardPseudoClassMozilla = nonStandard.pseudo.class.moz;

const deprecatedProperty = deprecated.property;
const experimentalProperty = experimental.property;
const nonStandardProperty = nonStandard.property;

const propertiesOrder = {
  'order/order': [
    'custom-properties',
    'dollar-variables',
    await createAtRule({ name: 'include', hasBlock: false }),
    'declarations',
    await createRule({ selector: '::selection' }),
    await createRule({ selector: '::backdrop' }),
    await createRule({ selector: '::before' }),
    await createRule({ selector: '::after' }),
    await createRule({ selector: '::marker' }),
    await createRule({ selector: '::first-line' }),
    await createRule({ selector: '::first-letter' }),
    await createRule({ selector: '::cue' }),
    await createRule({ selector: '::cue-region' }),
    await createRule({ selector: '::placeholder' }),
    await createRule({ selector: '::file-selector-button' }),
    await createRule({ selector: '::highlight' }),
    await createRule({ selector: '::part' }),
    await createRule({ selector: '::slotted' }),
    await createRule({ selector: experimentalPseudoElement.targetText }),
    await createRule({ selector: experimentalPseudoElement.error.spelling }),
    await createRule({ selector: experimentalPseudoElement.error.grammar }),
    await createRule({ selector: experimentalPseudoElement.viewTransition }),
    await createRule({ selector: experimentalPseudoElement.view.transition.group }),
    await createRule({
      selector: experimentalPseudoElement.view.transition.imagePair,
    }),
    await createRule({ selector: experimentalPseudoElement.view.transition.new }),
    await createRule({ selector: experimentalPseudoElement.view.transition.old }),
    await createRule({
      selector: experimentalPseudoElementWebkit.slider.runnableTrack,
    }),
    await createRule({ selector: experimentalPseudoElementWebkit.slider.thumb }),
    await createRule({ selector: experimentalPseudoElementMozilla.focusInner }),
    await createRule({ selector: nonStandardPseudoElementWebkit.innerSpinButton }),
    await createRule({ selector: nonStandardPseudoElementWebkit.meter.bar }),
    await createRule({
      selector: nonStandardPseudoElementWebkit.meter.value.evenLessGood,
    }),
    await createRule({
      selector: nonStandardPseudoElementWebkit.meter.innerElement,
    }),
    await createRule({
      selector: nonStandardPseudoElementWebkit.meter.value.optimum,
    }),
    await createRule({
      selector: nonStandardPseudoElementWebkit.meter.value.subOptimum,
    }),
    await createRule({ selector: nonStandardPseudoElementWebkit.progress.bar }),
    await createRule({
      selector: nonStandardPseudoElementWebkit.progress.innerElement,
    }),
    await createRule({ selector: nonStandardPseudoElementWebkit.progress.value }),
    await createRule({ selector: nonStandardPseudoElementWebkit.scrollbar }),
    await createRule({
      selector: nonStandardPseudoElementWebkit.search.button.results,
    }),
    await createRule({
      selector: nonStandardPseudoElementWebkit.search.button.cancel,
    }),
    await createRule({ selector: nonStandardPseudoElementMozilla.colorSwatch }),
    await createRule({ selector: nonStandardPseudoElementMozilla.list.bullet }),
    await createRule({ selector: nonStandardPseudoElementMozilla.list.number }),
    await createRule({ selector: nonStandardPseudoElementMozilla.page }),
    await createRule({ selector: nonStandardPseudoElementMozilla.pageSequence }),
    await createRule({ selector: nonStandardPseudoElementMozilla.pageSequence }),
    await createRule({ selector: nonStandardPseudoElementMozilla.progressBar }),
    await createRule({ selector: nonStandardPseudoElementMozilla.range.track }),
    await createRule({ selector: nonStandardPseudoElementMozilla.range.progress }),
    await createRule({ selector: nonStandardPseudoElementMozilla.range.thumb }),
    await createRule({
      selector: nonStandardPseudoElementMozilla.scrolledPageSequence,
    }),
    await createRule({ selector: ':root' }),
    await createRule({ selector: ':lang' }),
    await createRule({ selector: ':scope' }),
    await createRule({ selector: ':modal' }),
    await createRule({ selector: ':past' }),
    await createRule({ selector: ':current' }),
    await createRule({ selector: ':future' }),
    await createRule({ selector: ':where' }),
    await createRule({ selector: ':is' }),
    await createRule({ selector: ':has' }),
    await createRule({ selector: ':not' }),
    await createRule({ selector: ':empty' }),
    await createRule({ selector: ':target' }),
    await createRule({ selector: ':link' }),
    await createRule({ selector: ':local-link' }),
    await createRule({ selector: ':any-link' }),
    await createRule({ selector: ':defined' }),
    await createRule({ selector: ':buffering' }),
    await createRule({ selector: ':placeholder-shown' }),
    await createRule({ selector: ':right' }),
    await createRule({ selector: ':left' }),
    await createRule({ selector: ':host' }),
    await createRule({ selector: ':host-content' }),
    await createRule({ selector: ':only-of-type' }),
    await createRule({ selector: ':first-of-type' }),
    await createRule({ selector: ':nth-of-type' }),
    await createRule({ selector: ':last-of-type' }),
    await createRule({ selector: ':nth-last-of-type' }),
    await createRule({ selector: ':only-child' }),
    await createRule({ selector: ':first' }),
    await createRule({ selector: ':first-child' }),
    await createRule({ selector: ':nth-child' }),
    await createRule({ selector: ':last-child' }),
    await createRule({ selector: ':nth-last-child' }),
    await createRule({ selector: experimentalPseudoClass.targetWithin }),
    await createRule({ selector: experimentalPseudoClass.blank }),
    await createRule({ selector: ':default' }),
    await createRule({ selector: ':enabled' }),
    await createRule({ selector: ':disabled' }),
    await createRule({ selector: ':hover' }),
    await createRule({ selector: ':focus' }),
    await createRule({ selector: ':focus-within' }),
    await createRule({ selector: ':focus-visible' }),
    await createRule({ selector: ':active' }),
    await createRule({ selector: ':checked' }),
    await createRule({ selector: ':visited' }),
    await createRule({ selector: ':indeterminate' }),
    await createRule({ selector: ':in-range' }),
    await createRule({ selector: ':out-of-range' }),
    await createRule({ selector: ':valid' }),
    await createRule({ selector: ':invalid' }),
    await createRule({ selector: ':user-valid' }),
    await createRule({ selector: ':user-invalid' }),
    await createRule({ selector: ':read-only' }),
    await createRule({ selector: ':read-write' }),
    await createRule({ selector: ':optional' }),
    await createRule({ selector: ':required' }),
    await createRule({ selector: ':popover-open' }),
    await createRule({ selector: ':fullscreen' }),
    await createRule({ selector: ':picture-in-picture' }),
    await createRule({ selector: ':autofill' }),
    await createRule({ selector: ':playing' }),
    await createRule({ selector: ':paused' }),
    await createRule({ selector: ':stalled' }),
    await createRule({ selector: ':muted' }),
    await createRule({ selector: ':volume-locked' }),
    await createRule({ selector: ':seeking' }),
    await createRule({ selector: nonStandardPseudoClassMozilla.broken }),
    await createRule({ selector: nonStandardPseudoClassMozilla.dragOver }),
    await createRule({ selector: nonStandardPseudoClassMozilla.node.first }),
    await createRule({ selector: nonStandardPseudoClassMozilla.node.last }),
    await createRule({ selector: nonStandardPseudoClassMozilla.handler.blocked }),
    await createRule({ selector: nonStandardPseudoClassMozilla.handler.crashed }),
    await createRule({ selector: nonStandardPseudoClassMozilla.handler.disabled }),
    await createRule({ selector: nonStandardPseudoClassMozilla.loading }),
    await createRule({ selector: nonStandardPseudoClassMozilla.localeDir }),
    await createRule({ selector: nonStandardPseudoClassMozilla.onlyWhitespace }),
    await createRule({ selector: nonStandardPseudoClassMozilla.submitInvalid }),
    await createRule({ selector: nonStandardPseudoClassMozilla.suppressed }),
    await createRule({ selector: nonStandardPseudoClassMozilla.userDisabled }),
    await createRule({ selector: nonStandardPseudoClassMozilla.windowInactive }),
    await createRule({ selector: patterns.nested.ATTRIBUTE_PATTERN }),
    await createRule({ selector: patterns.nested.CLASS_PATTERN }),
    await createRule({ selector: patterns.nested.MODIFIER_PATTERN }),
    await createRule({ selector: patterns.nested.ELEMENT_PATTERN }),
    await createRule({ selector: patterns.child.ATTRIBUTE_PATTERN }),
    await createRule({ selector: patterns.child.CLASS_PATTERN }),
    'rules',
    await createAtRule({ name: 'include', hasBlock: true }),
    'at-rules',
  ],
  'order/properties-order': [
    [
      await createLogicalGroup({ groupName: 'All', properties: ['all', 'page'] }),
      await createLogicalGroup({
        groupName: 'Print',
        properties: [
          'break-before',
          'break-inside',
          'break-after',
          'orphans',
          'widows',
        ],
      }),
      await createLogicalGroup({
        groupName: 'Actions',
        properties: [
          'cursor',
          'pointer-events',
          'touch-action',
          'resize',
          nonStandardProperty.zoom,
        ],
      }),
      await createLogicalGroup({
        groupName: 'User Actions',
        properties: ['user-select', 'user-zoom'],
      }),
      await createLogicalGroup({
        groupName: 'Content',
        properties: ['content', 'quotes'],
      }),
      await createLogicalGroup({
        groupName: 'Counter',
        properties: ['counter-increment', 'counter-set', 'counter-reset'],
      }),
      await createLogicalGroup({
        groupName: 'List',
        properties: [
          'list-style',
          'list-style-type',
          'list-style-position',
          'list-style-image',
        ],
      }),
      await createLogicalGroup({
        groupName: 'Marker',
        properties: ['marker', 'marker-start', 'marker-mid', 'marker-end'],
      }),
      await createLogicalGroup({
        groupName: 'Display',
        properties: [
          'display',
          'opacity',
          'isolation',
          'visibility',
          'backface-visibility',
          'appearance',
          experimentalProperty.contentVisibility,
        ],
      }),
      await createLogicalGroup({
        groupName: 'Position',
        properties: [
          'position',
          deprecatedProperty.float,
          deprecatedProperty.clear,
          'offset',
          'offset-position',
          'offset-path',
          'offset-distance',
          'offset-rotate',
          'offset-anchor',
          'inset',
          'inset-block',
          'inset-block-start',
          'inset-block-end',
          'inset-inline',
          'inset-inline-start',
          'inset-inline-end',
          deprecatedProperty.top,
          deprecatedProperty.right,
          deprecatedProperty.bottom,
          deprecatedProperty.left,
          'z-index',
        ],
      }),
      await createLogicalGroup({
        groupName: 'Outline',
        properties: [
          'outline',
          'outline-width',
          'outline-style',
          'outline-color',
          'outline-offset',
        ],
      }),
      await createLogicalGroup({
        groupName: 'Shape',
        properties: ['shape-outside', 'shape-margin', 'shape-image-threshold'],
      }),
      await createLogicalGroup({
        groupName: 'Mask',
        properties: [
          'mask',
          'mask-border',
          'mask-border-source',
          'mask-border-slice',
          'mask-border-width',
          'mask-border-outset',
          'mask-border-repeat',
          'mask-border-mode',
          'mask-image',
          'mask-clip',
          'mask-origin',
          'mask-type',
          'mask-size',
          'mask-position',
          'mask-repeat',
          'mask-mode',
          'mask-composite',
        ],
      }),
      await createLogicalGroup({
        groupName: 'Margin',
        properties: [
          'margin',
          'margin-block',
          'margin-block-start',
          'margin-block-end',
          'margin-inline',
          'margin-inline-start',
          'margin-inline-end',
          deprecatedProperty.margin.top,
          deprecatedProperty.margin.right,
          deprecatedProperty.margin.bottom,
          deprecatedProperty.margin.left,
          experimentalProperty.marginTrim,
        ],
      }),
      await createLogicalGroup({
        groupName: 'Border',
        properties: [
          'border',
          'border-width',
          'border-style',
          'border-color',
          'border-radius',
          'border-start-start-radius',
          'border-start-end-radius',
          'border-end-start-radius',
          'border-end-end-radius',
          'border-block',
          'border-block-width',
          'border-block-style',
          'border-block-color',
          'border-block-start',
          'border-block-start-width',
          'border-block-start-style',
          'border-block-start-color',
          'border-block-end',
          'border-block-end-width',
          'border-block-end-style',
          'border-block-end-color',
          'border-inline',
          'border-inline-width',
          'border-inline-style',
          'border-inline-color',
          'border-inline-start',
          'border-inline-start-width',
          'border-inline-start-style',
          'border-inline-start-color',
          'border-inline-end',
          'border-inline-end-width',
          'border-inline-end-style',
          'border-inline-end-color',
          deprecatedProperty.borderTop,
          deprecatedProperty.border.top.leftRadius,
          deprecatedProperty.border.top.rightRadius,
          deprecatedProperty.border.top.width,
          deprecatedProperty.border.top.style,
          deprecatedProperty.border.top.color,
          deprecatedProperty.borderRight,
          deprecatedProperty.border.right.width,
          deprecatedProperty.border.right.style,
          deprecatedProperty.border.right.color,
          deprecatedProperty.borderBottom,
          deprecatedProperty.border.bottom.leftRadius,
          deprecatedProperty.border.bottom.rightRadius,
          deprecatedProperty.border.bottom.width,
          deprecatedProperty.border.bottom.style,
          deprecatedProperty.border.bottom.color,
          deprecatedProperty.borderLeft,
          deprecatedProperty.border.left.width,
          deprecatedProperty.border.left.style,
          deprecatedProperty.border.left.color,
          'border-image',
          'border-image-source',
          'border-image-slice',
          'border-image-width',
          'border-image-outset',
          'border-image-repeat',
        ],
      }),
      await createLogicalGroup({
        groupName: 'Box',
        properties: ['box-sizing', 'box-decoration-break', 'box-shadow'],
      }),
      await createLogicalGroup({
        groupName: 'Object',
        properties: ['object-fit', 'object-position'],
      }),
      await createLogicalGroup({
        groupName: 'container',
        properties: ['container', 'container-name', 'container-type'],
      }),
      await createLogicalGroup({
        groupName: 'Contain',
        properties: [
          'contain',
          'contain-intrinsic-size',
          'contain-intrinsic-block-size',
          'contain-intrinsic-inline-size',
          deprecatedProperty.contain.intrinsic.height,
          deprecatedProperty.contain.intrinsic.width,
        ],
      }),
      await createLogicalGroup({
        groupName: 'Dimensions',
        properties: [
          'aspect-ratio',
          'block-size',
          'min-block-size',
          'max-block-size',
          'inline-size',
          'min-inline-size',
          'max-inline-size',
          deprecatedProperty.height,
          deprecatedProperty.min.height,
          deprecatedProperty.max.height,
          deprecatedProperty.width,
          deprecatedProperty.min.width,
          deprecatedProperty.max.width,
        ],
      }),
      await createLogicalGroup({
        groupName: 'Padding',
        properties: [
          'padding',
          'padding-block',
          'padding-block-start',
          'padding-block-end',
          'padding-inline',
          'padding-inline-start',
          'padding-inline-end',
          deprecatedProperty.padding.top,
          deprecatedProperty.padding.right,
          deprecatedProperty.padding.bottom,
          deprecatedProperty.padding.left,
        ],
      }),
      await createLogicalGroup({
        groupName: 'Overflow',
        properties: [
          'overflow',
          'overflow-clip-margin',
          'overflow-block',
          'overflow-inline',
          deprecatedProperty.overflow.y,
          deprecatedProperty.overflow.x,
          'overflow-wrap',
          'overflow-anchor',
        ],
      }),
      await createLogicalGroup({
        groupName: 'Overscroll',
        properties: [
          'overscroll-behavior',
          'overscroll-behavior-block',
          'overscroll-behavior-inline',
          deprecatedProperty.overscroll.behavior.y,
          deprecatedProperty.overscroll.behavior.x,
        ],
      }),
      await createLogicalGroup({
        groupName: 'Scroll',
        properties: [
          'scroll-margin',
          'scroll-margin-block',
          'scroll-margin-block-start',
          'scroll-margin-block-end',
          'scroll-margin-inline',
          'scroll-margin-inline-start',
          'scroll-margin-inline-end',
          deprecatedProperty.scroll.margin.top,
          deprecatedProperty.scroll.margin.right,
          deprecatedProperty.scroll.margin.bottom,
          deprecatedProperty.scroll.margin.left,
          'scroll-padding',
          'scroll-padding-block',
          'scroll-padding-block-start',
          'scroll-padding-block-end',
          'scroll-padding-inline',
          'scroll-padding-inline-start',
          'scroll-padding-inline-end',
          deprecatedProperty.scroll.padding.top,
          deprecatedProperty.scroll.padding.right,
          deprecatedProperty.scroll.padding.bottom,
          deprecatedProperty.scroll.padding.left,
          'scroll-snap-type',
          'scroll-snap-align',
          'scroll-snap-stop',
          'scroll-behavior',
          experimentalProperty.scroll.timeline,
          experimentalProperty.scroll.timelineName,
          experimentalProperty.scroll.timelineAxis,
        ],
      }),
      await createLogicalGroup({
        groupName: 'Scrollbar',
        properties: ['scrollbar-gutter', 'scrollbar-width', 'scrollbar-color'],
      }),
      await createLogicalGroup({
        groupName: 'Columns',
        properties: [
          'columns',
          'column-width',
          'column-count',
          'column-fill',
          'column-span',
          'column-rule',
          'column-rule-width',
          'column-rule-style',
          'column-rule-color',
        ],
      }),
      await createLogicalGroup({
        groupName: 'Grid',
        properties: [
          'grid',
          'grid-area',
          'grid-template',
          'grid-template-areas',
          'grid-template-columns',
          'grid-template-rows',
          'grid-auto-flow',
          'grid-auto-columns',
          'grid-column',
          'grid-column-start',
          'grid-column-end',
          'grid-auto-rows',
          'grid-row',
          'grid-row-start',
          'grid-row-end',
          'gap',
          'column-gap',
          'row-gap',
          experimentalProperty.masonryAutoFlow,
        ],
      }),
      await createLogicalGroup({
        groupName: 'Flex',
        properties: [
          'flex',
          'flex-grow',
          'flex-shrink',
          'flex-basis',
          'flex-flow',
          'flex-direction',
          'flex-wrap',
          'order',
        ],
      }),
      await createLogicalGroup({
        groupName: 'Table',
        properties: [
          'table-layout',
          'border-spacing',
          'border-collapse',
          'empty-cells',
          'vertical-align',
          'caption-side',
        ],
      }),
      await createLogicalGroup({
        groupName: 'Alignment',
        properties: [
          'place-content',
          'place-items',
          'place-self',
          experimentalProperty.tracks.align,
          'align-content',
          'align-items',
          'align-self',
          experimentalProperty.tracks.justify,
          'justify-content',
          'justify-items',
          'justify-self',
        ],
      }),
      await createLogicalGroup({
        groupName: 'Image',
        properties: [
          'image-orientation',
          'image-rendering',
          experimentalProperty.imageResolution,
        ],
      }),
      await createLogicalGroup({
        groupName: 'Typography',
        properties: [
          'unicode-bidi',
          'unicode-range',
          'tab-size',
          'direction',
          'writing-mode',
          'white-space',
          experimentalProperty.whiteSpaceCollapse,
          'ruby-position',
          experimentalProperty.rubyAlign,
          'line-break',
          'line-height',
          experimentalProperty.lineHeightStep,
          'word-spacing',
          'word-wrap',
          'word-break',
          experimentalProperty.initial.letter,
          experimentalProperty.initial.letterAlign,
          'letter-spacing',
          'hyphens',
          'hyphenate-character',
          'hyphenate-limit-chars',
          'hanging-punctuation',
        ],
      }),
      await createLogicalGroup({
        groupName: 'Text',
        properties: [
          'text-overflow',
          'text-rendering',
          'text-indent',
          'text-justify',
          'text-orientation',
          'text-shadow',
          'text-transform',
          'text-anchor',
          'text-wrap',
          'text-align',
          'text-align-last',
          experimentalProperty.text.sizeAdjust,
          'text-combine-upright',
          'text-decoration',
          experimentalProperty.text.decorationSkip,
          'text-decoration-skip-ink',
          'text-decoration-thickness',
          'text-decoration-line',
          'text-decoration-style',
          'text-decoration-color',
          'text-emphasis',
          'text-emphasis-position',
          'text-emphasis-style',
          'text-emphasis-color',
          'text-underline-position',
          'text-underline-offset',
        ],
      }),
      await createLogicalGroup({
        groupName: 'Font',
        properties: [
          'src',
          'font',
          'font-family',
          'font-size',
          'font-size-adjust',
          'font-weight',
          'font-style',
          'font-display',
          'font-palette',
          'font-kerning',
          'font-stretch',
          nonStandardProperty.font.smooth,
          'font-optical-sizing',
          'font-language-override',
          'font-feature-settings',
          'font-synthesis',
          'font-synthesis-weight',
          'font-synthesis-style',
          'font-synthesis-small-caps',
          'font-variant',
          'font-variant-position',
          'font-variant-ligatures',
          'font-variant-numeric',
          'font-variant-emoji',
          'font-variant-caps',
          'font-variant-east-asian',
          'font-variant-alternates',
          'font-variation-settings',
        ],
      }),
      await createLogicalGroup({
        groupName: 'Math',
        properties: ['math-depth', experimentalProperty.mathShift, 'math-style'],
      }),
      await createLogicalGroup({
        groupName: 'SVG',
        properties: ['fill', 'stroke', 'paint-order'],
      }),
      await createLogicalGroup({
        groupName: 'Color',
        properties: [
          'color-scheme',
          'accent-color',
          'color',
          'caret-color',
          'forced-color-adjust',
          'print-color-adjust',
        ],
      }),
      await createLogicalGroup({
        groupName: 'Background',
        properties: [
          'background',
          'background-image',
          'background-color',
          'background-origin',
          'background-size',
          'background-position',
          'background-position-y',
          'background-position-x',
          'background-repeat',
          'background-attachment',
          'background-clip',
          'background-blend-mode',
        ],
      }),
      await createLogicalGroup({
        groupName: 'Filter',
        properties: [
          experimentalProperty.overlay,
          'filter',
          'backdrop-filter',
          'mix-blend-mode',
          'clip-path',
        ],
      }),
      await createLogicalGroup({
        groupName: 'Transform',
        properties: [
          'transform',
          'transform-origin',
          'transform-box',
          'transform-style',
          'translate',
          'scale',
          'rotate',
          'will-change',
          'perspective',
          'perspective-origin',
        ],
      }),
      await createLogicalGroup({
        groupName: 'Transition',
        properties: [
          'transition',
          'transition-property',
          'transition-duration',
          'transition-timing-function',
          'transition-delay',
          experimentalProperty.transitionBehavior,
        ],
      }),
      await createLogicalGroup({
        groupName: 'Animation',
        properties: [
          'animation',
          'animation-name',
          'animation-duration',
          'animation-timing-function',
          'animation-delay',
          'animation-iteration-count',
          'animation-direction',
          'animation-fill-mode',
          'animation-play-state',
          'animation-composition',
          experimentalProperty.timelineScope,
          experimentalProperty.animation.timeline,
          experimentalProperty.animation.range,
          experimentalProperty.animation.rangeStart,
          experimentalProperty.animation.rangeEnd,
        ],
      }),
      await createLogicalGroup({
        groupName: 'View Timeline',
        properties: [
          experimentalProperty.view.timeline,
          experimentalProperty.view.timelineName,
          experimentalProperty.view.timelineAxis,
          experimentalProperty.view.timelineInset,
          experimentalProperty.view.transitionName,
        ],
      }),
    ],
    {
      unspecified: 'bottomAlphabetical',
    },
  ],
};

export { propertiesOrder };
